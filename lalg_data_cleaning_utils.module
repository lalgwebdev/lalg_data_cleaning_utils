<?php

//************************************************************
// Creates VBO Action to delete all personal data
//************************************************************
/**
 * Implements hook_action_info()
 * Creates a VBO Action to delete a Contact and all personal data.
 */
function lalg_data_cleaning_utils_action_info() {
//	dpm('Hook Action Info called');
  return array(
      'lalg_data_cleaning_utils_delete_personal_data' => array(
      'type' => 'entity',
      'label' => t('Delete Contacts and all personal data'),
      'behavior' => array(''),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('civicrm_contact'),
    ),
  );
}

/**
 * Carries out the VBO Action to delete all personal data.
 */
function lalg_data_cleaning_utils_delete_personal_data (&$entity, $context) {
	// dpm('VBO Action');
	// dpm($entity);
	// dpm($context);	
	
	// Get the Contact Id.
	if ($context['entity_type'] != 'civicrm_contact' ) return;
	$cid = $entity -> contact_id;
// dpm('Contact_id ' . $cid);

	//Get the Drupal User ID
	$result = civicrm_api3('UFMatch', 'get', [
	  'contact_id' => $cid,
	]);
	if ($result[count] == 1) {
		$uid = $result['values'][0]['uf_id'];
	}
// dpm('Drupal User Id ' . $uid);

	// Delete related Activities
	$result = civicrm_api3('Activity', 'get', [
	  'sequential' => 1,
	  'contact_id' => $cid,
	  'options' => array(
		'limit' => 1000,
		'sort' => "id DESC"
	  ),
	]);
	foreach ($result['values'] as $activity) {
		$r = civicrm_api3('Activity', 'delete', [
		  'id' => $activity['id'],
		  'skip_undelete' => 1,
		]);
	}
	
	// Delete related Contributions
	$result = civicrm_api3('Contribution', 'get', [
	  'sequential' => 1,
	  'contact_id' => $cid,
	]);
	foreach ($result['values'] as $contrib) {
		$r = civicrm_api3('Contribution', 'delete', [
		  'id' => $contrib['id'],
		  'skip_undelete' => 1,
		]);
	}
	
	// Delete the Contact record
	// Flows down to associated address, Email, Membership, membership of Groups.
	$result = civicrm_api3('Contact', 'delete', [
	  'id' => $cid,
	  'skip_undelete' => 1,
	]);
	
	// Delete associated Drupal User, Reassign content to Anonymous
	if ($uid && $uid > 0) {
		user_cancel(
		  array(
			'user_cancel_notify' => FALSE,
			'user_cancel_method' => 'user_cancel_reassign',
		  ),
		  $uid,
		  'user_cancel_reassign'
		);
	}
}

/* //********************************************************************
// Adds Views Relationships 
//********************************************************************

function lalg_data_cleaning_utils_views_data_alter(&$data) {
//dpm($data);
  // This adds a relationship to table {civicrm_contact}, so that 'civicrm_participant' can be added to Views.
  // This is not provided by the standard code.
  // Because we don't want to write over
  // the primary key field definition for the {civicrm_contact}.fid field, we use a dummy
  // field name as the key.
  $data['civicrm_contact']['dummy_name'] = array(
    'title' => t('Participant from Contact Id'),
    'help' => t('Example help'),
    'relationship' => array(    
      'base' => 'civicrm_participant',		// Table we're joining to.     
      'base field' => 'contact_id',   		// Field on the joined table.
      'field' => 'id',						// Real field name on the 'civicrm_contact' table.
      'handler' => 'views_handler_relationship',
      'label' => t('Participant from Contact Id'),
      'title' => t('CiviCRM Participant'),
      'help' => t('Brings Participant Record from Contact Id.'),
    ),
  ); 
}

//********************************************************************
// Adds Hook to tweak the Query generated by the Delete Personal Data View.
//********************************************************************

// Needed because standard Views does not allow variable logic within the HAVING clause,
// which is needed.

function lalg_data_cleaning_utils_views_query_alter(&$view, &$query) {
	//  Only relevant to the Delete Personal Data View
	if($view->name != 'delete_personal_data') { return; }
//dpm($view);
//dpm($query);

	// Views does not handle date expressions on HAVING clauses, so do it here.
	// Make as general and resilient as possible -
	// Can't make it work if put foreach on $query->having as well (??)
	if (!$query->having) { return; }
	
	foreach($query->having[1]['conditions'] as $filter) { 
		if ($filter['value'] && $filter['value'][':civicrm_event_start_date']) {
			$startDate = new DateTime($filter['value'][':civicrm_event_start_date']);
			$fdate = date_format($startDate, 'Ymd');
			$filter['value'][':civicrm_event_start_date'] = $fdate;
		}
	}
	// Views does AND on all HAVING conditions.  We want OR.
	$query->having[1]['type'] = 'OR';		

}

 */
